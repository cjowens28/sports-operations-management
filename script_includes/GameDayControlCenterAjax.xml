<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_som_sports_ops.GameDayControlCenterAjax</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Ajax handler for Game Day Control Center dashboard data</description>
        <name>GameDayControlCenterAjax</name>
        <script><![CDATA[
var GameDayControlCenterAjax = Class.create();
GameDayControlCenterAjax.prototype = Object.extendsObject(AbstractAjaxProcessor, {
    
    getMetrics: function() {
        var metrics = {
            activeTasks: this._getActiveTasks(),
            openIncidents: this._getOpenIncidents(),
            staffOnDuty: this._getStaffOnDuty(),
            systemsOnline: this._getSystemsOnline()
        };
        return JSON.stringify(metrics);
    },
    
    getCriticalTasks: function() {
        var html = '';
        var taskGR = new GlideRecord('x_som_sports_ops_game_day_task');
        taskGR.addQuery('priority', 'critical');
        taskGR.addQuery('state', '!=', 'completed');
        taskGR.orderByDesc('due_date');
        taskGR.setLimit(10);
        taskGR.query();
        
        while (taskGR.next()) {
            var priorityClass = 'task-priority-' + taskGR.priority;
            var statusColor = this._getTaskStatusColor(taskGR.state.toString());
            
            html += '<div class="task-item ' + priorityClass + '">';
            html += '<div>';
            html += '<strong>' + taskGR.title + '</strong><br/>';
            html += '<small>Due: ' + taskGR.due_date.getDisplayValue() + '</small>';
            html += '</div>';
            html += '<div>';
            html += '<span class="status-indicator ' + statusColor + '"></span>';
            html += taskGR.state.getDisplayValue();
            html += '</div>';
            html += '</div>';
        }
        
        if (html === '') {
            html = '<div class="task-item">No critical tasks at this time</div>';
        }
        
        return html;
    },
    
    getRecentIncidents: function() {
        var html = '';
        var incidentGR = new GlideRecord('incident');
        incidentGR.addQuery('category', 'Sports Operations');
        incidentGR.addQuery('state', '!=', '7'); // Not closed
        incidentGR.orderByDesc('sys_created_on');
        incidentGR.setLimit(10);
        incidentGR.query();
        
        while (incidentGR.next()) {
            var priorityClass = 'task-priority-' + incidentGR.priority;
            var statusColor = this._getIncidentStatusColor(incidentGR.state.toString());
            
            html += '<div class="task-item ' + priorityClass + '">';
            html += '<div>';
            html += '<strong>' + incidentGR.short_description + '</strong><br/>';
            html += '<small>Created: ' + incidentGR.sys_created_on.getDisplayValue() + '</small>';
            html += '</div>';
            html += '<div>';
            html += '<span class="status-indicator ' + statusColor + '"></span>';
            html += incidentGR.state.getDisplayValue();
            html += '</div>';
            html += '</div>';
        }
        
        if (html === '') {
            html = '<div class="task-item">No recent incidents</div>';
        }
        
        return html;
    },
    
    getStaffAssignments: function() {
        var html = '<table style="width: 100%; border-collapse: collapse;">';
        html += '<thead><tr style="background: #f8f9fa;">';
        html += '<th style="padding: 10px; text-align: left;">Staff Member</th>';
        html += '<th style="padding: 10px; text-align: left;">Role</th>';
        html += '<th style="padding: 10px; text-align: left;">Location</th>';
        html += '<th style="padding: 10px; text-align: left;">Status</th>';
        html += '</tr></thead><tbody>';
        
        var assignmentGR = new GlideRecord('x_som_sports_ops_staff_assignment');
        assignmentGR.addQuery('event.state', 'active');
        assignmentGR.orderBy('staff_member.name');
        assignmentGR.setLimit(20);
        assignmentGR.query();
        
        while (assignmentGR.next()) {
            var statusColor = assignmentGR.status == 'on_duty' ? 'status-green' : 'status-yellow';
            
            html += '<tr style="border-bottom: 1px solid #eee;">';
            html += '<td style="padding: 10px;">' + assignmentGR.staff_member.getDisplayValue() + '</td>';
            html += '<td style="padding: 10px;">' + assignmentGR.role + '</td>';
            html += '<td style="padding: 10px;">' + assignmentGR.location + '</td>';
            html += '<td style="padding: 10px;">';
            html += '<span class="status-indicator ' + statusColor + '"></span>';
            html += assignmentGR.status.getDisplayValue();
            html += '</td>';
            html += '</tr>';
        }
        
        html += '</tbody></table>';
        
        if (assignmentGR.getRowCount() === 0) {
            html = '<div style="text-align: center; padding: 20px;">No active staff assignments</div>';
        }
        
        return html;
    },
    
    _getActiveTasks: function() {
        var taskGR = new GlideRecord('x_som_sports_ops_game_day_task');
        taskGR.addQuery('state', '!=', 'completed');
        taskGR.addQuery('state', '!=', 'cancelled');
        taskGR.query();
        return taskGR.getRowCount();
    },
    
    _getOpenIncidents: function() {
        var incidentGR = new GlideRecord('incident');
        incidentGR.addQuery('category', 'Sports Operations');
        incidentGR.addQuery('state', '!=', '7'); // Not closed
        incidentGR.query();
        return incidentGR.getRowCount();
    },
    
    _getStaffOnDuty: function() {
        var assignmentGR = new GlideRecord('x_som_sports_ops_staff_assignment');
        assignmentGR.addQuery('status', 'on_duty');
        assignmentGR.addQuery('event.state', 'active');
        assignmentGR.query();
        return assignmentGR.getRowCount();
    },
    
    _getSystemsOnline: function() {
        // This would integrate with monitoring systems
        // For now, return a static value
        return 98;
    },
    
    _getTaskStatusColor: function(state) {
        switch (state) {
            case 'completed':
                return 'status-green';
            case 'in_progress':
                return 'status-yellow';
            case 'overdue':
                return 'status-red';
            default:
                return 'status-yellow';
        }
    },
    
    _getIncidentStatusColor: function(state) {
        switch (state) {
            case '1': // New
                return 'status-red';
            case '2': // In Progress
                return 'status-yellow';
            case '6': // Resolved
                return 'status-green';
            default:
                return 'status-yellow';
        }
    },

    type: 'GameDayControlCenterAjax'
});
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-01-01 00:00:00</sys_created_on>
        <sys_id>si001234567890123456789012345678901234si</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>GameDayControlCenterAjax</sys_name>
        <sys_package display_value="Sports Operations Management" source="x_som_sports_ops">a1b2c3d4e5f6789012345678901234567890abcd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Sports Operations Management">a1b2c3d4e5f6789012345678901234567890abcd</sys_scope>
        <sys_update_name>sys_script_include_si001234567890123456789012345678901234si</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-01 00:00:00</sys_updated_on>
    </sys_script_include>
</record_update>